<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="sp" uri="http://www.springframework.org/tags/form" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap Table Example</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <style>
    	
    	body{
    		background-color: black;
    	}
    	
       .itemName{
       	word-wrap: break-word;  /* 換行 */
        word-break: break-all;  /* 當單字超出容器時斷開 */
        max-width: 5.5ch;  /* 設定最大寬度為 4 中文字 */
        text-align:center;
        color: white;
       }
       .itemNa{
       		text-align: right;
       		color: white;
       }
       
       thead {
    background-color: #333333;
    position: sticky;
    top: 0;
    z-index: 1;
}



	
       td{
       	text-align: right;
       }
       
       .modal-content{
       	border-top: 10px solid #df5334;
       }
       
       /* 定義新的按鈕顏色 */
		.btn-custom {
		    background-color: #df5334;
		    color: #ffffff; /* 設定文字顏色，根據需要調整 */
		}

		/* 鼠標懸停時的效果（可選） */
		.btn-custom:hover {
		    background-color: #a12312; /* 根據需要調整顏色 */
		}
		
		/* 調整按鈕樣式 */
		custom-btn {
		    width: 150px ; /* 設定按鈕寬度，根據需要調整 */
		    background-color: #ffffff ;
		    border: 2px solid #df5334 ; /* 添加邊框，根據需要調整顏色和寬度 */
		    color: #000000 ; /* 設定文字顏色，根據需要調整 */
		}

		/* 鼠標懸停時的效果 */
		custom-btn:hover {
		    background-color: #df5334 !important; /* 鼠標懸停時的背景顏色，根據需要調整 */
		    color: #ffffff ; /* 鼠標懸停時的文字顏色，根據需要調整 */
		}
       
    </style>
    
</head>
<body>
    <div class="container" id="stock">
        <table class="table table-striped">
       			 <div id="spinner">
	                <span class="visually-hidden">Loading...</span>
	             </div>
	             <div id="someElementId">${semiOptional}</div>
            <thead>
                <!-- 表格標題 -->
               <tr>
                    <th scope="col" class="itemName">商品</th>
                    <th scope="col" class="itemNa">成交</th>
                    <th scope="col" class="itemNa">開盤</th>
                    <th scope="col" class="itemNa">最高價</th>
                    <th scope="col" class="itemNa">最低價</th>
                    <th scope="col" class="itemNa">均價</th>
                    <th scope="col" class="itemNa">成交金額(億)</th>
                    <th scope="col" class="itemNa">昨收</th>
                    <th scope="col" class="itemNa">漲跌幅</th>
                    <th scope="col" class="itemNa">漲跌</th>
                    <th scope="col" class="itemNa">總量</th>
                    <th scope="col" class="itemNa">昨日交易量</th>
                    <th scope="col" class="itemNa">振幅</th>
                    <th scope="col" class="itemNa">加入自選</th>
                </tr>
            </thead>
            <tbody>
	            
	            
            <!-- 表格內容 -->
            
        </tbody>
        </table>
    </div>
    
<!-- 在<body>中加入以下模態框的 HTML 代碼 -->
<div class="modal" id="stockModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">股票購買</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 股票詳細信息的表格 -->
                <table class="table modal-table">
                    <tr>
        				<th>股票名稱</th>
        				<td id="modalName"></td>
    				</tr>
    				 <tr>
        				<th>個股價格</th>
        				<td id="modalPrice"></td>
    				</tr>
   					<tr>
        				
    				</tr>
                    <!-- 其他股票詳細信息的表格行 -->
                </table>

                <!-- 模擬購買的表單 -->
                <form id="buyStockForm">
                <div class="mb-3">
                <label for="transactionType" class="form-label">股票買賣</label>
                	<select id="transactionType" class="form-select" required>
			            <option value="buy">購買</option>
			            <option value="sell">販賣</option>
        			</select>	
        			</div>	
                    <div class="mb-3">
                        <label for="buyQuantity" class="form-label">數量</label>
                        <input type="number" id="buyQuantity" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="totalPrice" class="form-label">總價</label>
                        <p id="totalPrice">0</p>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                <button type="button" class="btn btn-custom" onclick="buyStock()">購買</button>
            </div>
        </div>
    </div>
</div>
    
    <script>
		
 // 全局變量用於保存股票價格
    var currentStockPrice = 0;
    var currentStockName = '';

    $(function() {
        // 使用jQuery的ajax函数从服务器获取数据
        $.ajax({
            url: 'http://localhost:8080/StockAnalysisSystem/mvc/stock',
            success: function (data) {
                console.log(data);
            }
        });
    });

    // 创建WebSocket连接
    var socket = new WebSocket('ws://localhost:8080/StockAnalysisSystem/mvc/websocket');

    // 当WebSocket连接打开时触发的事件
    socket.onopen = function() {
        console.log('WebSocket连接已建立');
    };

    // 当WebSocket接收到消息时触发的事件
    socket.onmessage = function(event) {
        // 解析收到的JSON数据
        let message = JSON.parse(event.data);
        if (message.type == 'stocks') {
            let stocks = message.content;
            console.log(stocks);

            // 移除表格中已有的行
            $('#stock tbody tr').remove();
            // 隐藏加载状态
            $('#spinner').addClass('d-none');

            // 遍历stocks数组，将数据添加到表格中
            $.each(stocks, function(index, stock) {
                // 创建超链接
                var link = $('<a>').text(stock.stockName).css('color', 'white');
                
                
                		var tableRow = $('<tr>').append(
                        $('<th scope="row">').append(link),
                        $('<td>').text(stock.price),
                        $('<td>').text(stock.openingPrice),
                        $('<td>').text(stock.highPrice),
                        $('<td>').text(stock.lowPrice),
                        $('<td>').text(stock.averagePrice),
                        $('<td>').text(stock.transactionAmountBillion),
                        $('<td>').text(stock.previousClosingPrice),
                        $('<td>').text(stock.changePercentage),
                        $('<td>').text(stock.changeP),
                        $('<td>').text(stock.totalVolume),
                        $('<td>').text(stock.previousVolume),
                        $('<td>').text(stock.amplitude),
                        $('<td>').append(
                                $('<button class="custom-btn btn-sm ">').text('+').on('click', function() {
                                    // 添加你的“加入自選”按钮的点击事件处理逻辑
                                    // 可以在这里执行你的操作，例如弹出提示框或触发其他事件
                                    console.log('try to add to Watchlist clicked for ' + stock.stockName);
 //                                   alert('成功將'+ stock.stockName + '加入清單')
                                   // window.location.href='${pageContext.request.contextPath}/mvc/group_buy/fronted/stockProduck';
                                 // 使用Ajax發送請求到後端
                                    $.ajax({
                                        type: 'POST',
                                        url: '${pageContext.request.contextPath}/mvc/group_buy/fronted/watchlist',
                                        contentType: 'application/json',
                                        data: JSON.stringify({
                                            stockName: stock.stockName
                                        }),
                                        success: function(response) {
                                            // 在這裡處理從後端收到的數據
                                            alert(response);
//                                            window.location.href = '${pageContext.request.contextPath}/mvc/group_buy/fronted/main';

                                            // 例如，你可以跳轉到一個新的頁面，將數據傳遞給該頁面
                                            // window.location.href = '新的頁面URL';
                                            
                                            //$('#someElementId').text(response);
                                        },
                                        error: function(error) {
                                        	console.log(response);
                                            console.log('Error2:', error);
                                        }
                                    });
                                })
                            
                    )
                );

             // 根據成交價和昨收價比較，設置字體顏色
                var priceColor = 'black';
                if (stock.price > stock.previousClosingPrice) {
                    priceColor = '#FF0000';
                } else if (stock.price < stock.previousClosingPrice) {
                    priceColor = '#00FF00';
                } else {
                    priceColor = '#FFFF00';
                }

                // 將字體顏色應用到表格行的每一列
                tableRow.find('td').css('color', priceColor);

                // 將表格行添加到表格中
                $('#stock tbody').append(tableRow);
                
                
             // 為超鏈接添加點擊事件
                link.click(function() {
                    // 將股票詳細信息填入模態框
                    $('#modalName').text(stock.stockName);
                    $('#modalPrice').text(stock.price);
                    

                    // 保存股票價格
                    currentStockPrice = stock.price;
                    currentStockName = stock.stockName;

                    // 重置購買表單
                    $('#buyQuantity').val('');
                    $('#totalPrice').text('0');

                    // 打開模態框
                    $('#stockModal').modal('show');
                });
            });
        }
    };

    // 当WebSocket连接关闭时触发的事件
    socket.onclose = function() {
        console.log('WebSocket连接已关闭');
    };
    
 // 監聽數量輸入框的變化，實時更新總價格
    $('#buyQuantity').on('input', updateTotalPrice);
    
 // 計算總價格並更新模態框
    function updateTotalPrice() {
        var quantity = $('#buyQuantity').val();
        var totalPrice = Math.ceil(parseFloat(quantity) * currentStockPrice);
        
     // 保存實際的數值，而不是格式化後的字符串
        $('#totalPrice').data('actualValue', totalPrice);
        
     // 格式化價格，添加千位分隔符
        var formattedPrice = totalPrice.toLocaleString();
        $('#totalPrice').text(formattedPrice);
    }

 // 購買股票的函數
    function buyStock() {
        var quantity = $('#buyQuantity').val();
        var originalTotalPrice = $('#totalPrice').text(); // 保存原始值
        var totalPrice = originalTotalPrice.replace(/,/g, ''); // 將 totalPrice 轉換為數值
        var transactionType = $('#transactionType').val(); // 獲取操作類型

        // 檢查數量是否為正數
        if (quantity <= 0) {
            alert('數量必須是正數');
            return;
        }
		
        // 修正 totalprice，確保它是一個整數
        totalPrice = Math.round(totalPrice);
        
        // 將數量和總價設置為相應的負值
        if (transactionType === 'sell') {
            quantity = -quantity;
            totalPrice = -totalPrice;
        }

        // 在此添加將購買或販賣股票的信息提交到後端的代碼
        var data = {
            quantity: quantity,
            price: totalPrice,
            stockName: currentStockName,
            transactionType: transactionType // 將操作類型添加到提交的數據中
        };

        // 可以使用Ajax或表單提交，根據你的需求
        $.ajax({
            type: 'POST',
            url: '${pageContext.request.contextPath}/mvc/group_buy/fronted/stockData', // 替換為實際的後端端點
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function(response) {
                console.log(data);
                var formattedTotalPrice = originalTotalPrice; // 保存格式化的值

                // 提交成功的處理，可以根據後端返回的結果進行相應的操作
                alert('成功' + (transactionType === 'buy' ? '購買' : '販賣') + ' ' + currentStockName + '，' + Math.abs(quantity) + ' 股，'+(transactionType === 'buy' ? '花費' : '獲得') + ' ' + formattedTotalPrice + ' 元');
                // 可以根據需要進行其他處理
            },
            error: function(error) {
                // 提交失敗的處理，可以根據錯誤信息進行相應的操作
                alert((transactionType === 'buy' ? '購買' : '販賣') + '失敗：' + error.responseText);
                // 可以根據需要進行其他處理
            }
        });

        // 關閉模態框
        $('#stockModal').modal('hide');
    }


    // 監聽選擇的股票買賣類型的變化，實時更新按鈕的文字
    $('#transactionType').on('change', function() {
        var selectedTransactionType = $(this).val();
        $('#stockModal .btn-custom').text(selectedTransactionType === 'buy' ? '購買' : '販賣');
    });


	</script>
</body>
</html>
